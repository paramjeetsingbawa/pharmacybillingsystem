/**
 * *****************************************************************************
 * Copyright (c) 2008-2015 LogiCoy, Inc. All rights reserved. This program and
 * the accompanying materials are made available under the terms of LogiCoy
 * License v1.0 which accompanies this distribution, and is available at
 * http://www.logicoy.com
 *
 * Contributors: LogiCoy, Inc. - initial API and implementation
 * ****************************************************************************
 */
/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend:src/main/java/project/security/AccountDetailsServiceImpl-spring3.p.vm.java
 */
package com.param.medicalapp.kiterx.kiterx.controller;



import com.connection.ConnectionManager;
import com.param.medicalapp.kiterx.kiterx.dao.MonitoringDao;
import com.vivsoft.model.ApplicationConfiguration;


import java.io.File;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;


import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

/**
 *
 * @author Punyashree
 */
@Controller
@RequestMapping("/rest/CoreServiceExport")
public class ExcelDataExportControllerEhr {

    private static Logger logger = Logger.getLogger(ExcelDataExportControllerEhr.class.getCanonicalName());
    //private static final String FILE_PATH = "F:\\personalProject\\@TYPE_@TIME.xlsx";
    //private static final String BACKUP_FILE_PATH = "F:\\personalProject\\install";
    private static final String FILE_PATH = "D:\\Param\\";
    private static final String FILE_NAME = "@TYPE_@TIME.xlsx";
    private static final String FILE_NAME_CSV = "@TYPE_@TIME.csv";

    private static MonitoringDao monitordao;
    
    @PostConstruct
    public void init() {
        try {
            DataSource data = ConnectionManager.getConnectionManager().getDataSource();
            monitordao = new MonitoringDao();
            monitordao.setDataSource(ConnectionManager.getConnectionManager().getDataSource());
        } catch (Exception ex) {
            Logger.getLogger(CoreService.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    

    private static final Logger LOGGER = Logger.getLogger(ExcelDataExportControllerEhr.class.getName());

    @RequestMapping(value = "/downloadProductSheet")
    @ResponseBody
    public String downloadProductSheet(@RequestParam(name = "exportDir", required = false) String exportDir, HttpServletRequest request,
            HttpSession session, HttpServletResponse response)
            throws Exception {

        try {
            String fileName = null;
            try {
                fileName = FILE_PATH;
                boolean overRiddenPath = false;
                if (exportDir != null && exportDir.length() > 0) {
                    try {
                        File f = new File(exportDir);
                        if (f.exists() && f.isDirectory()) {
                            fileName = exportDir;
                            overRiddenPath = true;
                        }
                    } catch (Exception e) {

                    }
                }

                if (!overRiddenPath) {
                    File f = new File(fileName);
                    if (f.exists() && f.isDirectory()) {
                        overRiddenPath = true;
                    }
                }

                if (!overRiddenPath) {
                    fileName = System.getProperty("user.home");
                    File f = new File(fileName);
                    if (f.exists() && f.isDirectory()) {
                        overRiddenPath = true;
                    }
                }

                if (!fileName.endsWith(File.separator)) {
                    fileName = fileName + File.separator;
                }

                fileName = fileName + FILE_NAME;

                SimpleDateFormat format = new SimpleDateFormat("yyyyMMDDHHmmssS");
                fileName = fileName.replace("@TIME", format.format(new Date()));
                fileName = fileName.replace("@TYPE", "PRODUCT-SHEET");

                ExcelWriter excelWriter = new ExcelWriter();

                excelWriter.downloadProductSheet(fileName, "PRODUCT-CS-SHEET", monitordao);
            } catch (Exception ex) {
                LOGGER.log(Level.SEVERE, ex.getMessage(), ex);
                throw ex;
            }

            LOGGER.log(Level.INFO, "Report File path : {0}", fileName);
            return fileName;

        } catch (Exception e) {
            //logger.debug("Request could not be completed at this moment. Please try again.");
            e.printStackTrace();
            throw e;
        }
    }

    @RequestMapping(value = "/downloadCurrentStockSheet")
    @ResponseBody
    public String downloadCurrentStockSheet(@RequestParam(name = "exportDir", required = false) String exportDir, HttpServletRequest request,
            HttpSession session, HttpServletResponse response)
            throws Exception {

        try {
            String fileName = null;
            try {
                fileName = FILE_PATH;
                boolean overRiddenPath = false;
                if (exportDir != null && exportDir.length() > 0) {
                    try {
                        File f = new File(exportDir);
                        if (f.exists() && f.isDirectory()) {
                            fileName = exportDir;
                            overRiddenPath = true;
                        }
                    } catch (Exception e) {

                    }
                }

                if (!overRiddenPath) {
                    File f = new File(fileName);
                    if (f.exists() && f.isDirectory()) {
                        overRiddenPath = true;
                    }
                }

                if (!overRiddenPath) {
                    fileName = System.getProperty("user.home");
                    File f = new File(fileName);
                    if (f.exists() && f.isDirectory()) {
                        overRiddenPath = true;
                    }
                }

                if (!fileName.endsWith(File.separator)) {
                    fileName = fileName + File.separator;
                }

                fileName = fileName + FILE_NAME_CSV;

                SimpleDateFormat format = new SimpleDateFormat("yyyyMMDDHHmmssS");
                fileName = fileName.replace("@TIME", format.format(new Date()));
                fileName = fileName.replace("@TYPE", "PRODUCT-STOCK-VALID-QTY");

                ExcelWriter excelWriter = new ExcelWriter();
                
                
                LOGGER.log(Level.INFO, "Report File path : {0}", fileName);


                excelWriter.downloadProductSheetCurrentStockCSV(fileName, "PRODUCT-STOCK-VALID-QTY", monitordao);
            } catch (Exception ex) {
                LOGGER.log(Level.SEVERE, ex.getMessage(), ex);
                throw ex;
            }

            LOGGER.log(Level.INFO, "Report File path : {0}", fileName);

//            try (FileInputStream inputStream = new FileInputStream(fileName)) {
//                String fileNameString = new File(fileName).getName();
//                response.setHeader("Content-Disposition", "attachment; filename=" + fileNameString);
//                response.setHeader("Content-Transfer-Encoding", "binary");
//                response.setHeader("Cache-Control", "must-revalidate");
//                response.setHeader("Pragma", "public");
//                IOUtils.copy(inputStream, response.getOutputStream());
//                response.flushBuffer();
//                logger.log(Level.INFO, "File downloaded successfully.");
//            } catch (Exception e) {
//                logger.log(Level.SEVERE, "Request could not be completed at this moment. Please try again.", e);
//            }

            return fileName;

        } catch (Exception e) {
            //logger.debug("Request could not be completed at this moment. Please try again.");
            e.printStackTrace();
            throw e;
        }
    }

    @RequestMapping(value = "/downloadCurrentStockSheetZero")
    @ResponseBody
    public String downloadCurrentStockSheetZero(@RequestParam(name = "exportDir", required = false) String exportDir, HttpServletRequest request,
            HttpSession session, HttpServletResponse response)
            throws Exception {

        try {
            String fileName = null;
            try {
                fileName = FILE_PATH;
                boolean overRiddenPath = false;
                if (exportDir != null && exportDir.length() > 0) {
                    try {
                        File f = new File(exportDir);
                        if (f.exists() && f.isDirectory()) {
                            fileName = exportDir;
                            overRiddenPath = true;
                        }
                    } catch (Exception e) {

                    }
                }

                if (!overRiddenPath) {
                    File f = new File(fileName);
                    if (f.exists() && f.isDirectory()) {
                        overRiddenPath = true;
                    }
                }

                if (!overRiddenPath) {
                    fileName = System.getProperty("user.home");
                    File f = new File(fileName);
                    if (f.exists() && f.isDirectory()) {
                        overRiddenPath = true;
                    }
                }

                if (!fileName.endsWith(File.separator)) {
                    fileName = fileName + File.separator;
                }

                fileName = fileName + FILE_NAME_CSV;

                SimpleDateFormat format = new SimpleDateFormat("yyyyMMDDHHmmssS");
                fileName = fileName.replace("@TIME", format.format(new Date()));
                fileName = fileName.replace("@TYPE", "PRODUCT-STOCK-WITH-DELETED-ZERO-QTY");

                ExcelWriter excelWriter = new ExcelWriter();

                excelWriter.downloadProductSheetCurrentStockZeroCSV(fileName, "PRODUCT-STOCK-WITH-DELETED-ZERO-QTY", monitordao);
            } catch (Exception ex) {
                LOGGER.log(Level.SEVERE, ex.getMessage(), ex);
                throw ex;
            }

            LOGGER.log(Level.INFO, "Report File path : {0}", fileName);

//            try (FileInputStream inputStream = new FileInputStream(fileName)) {
//                String fileNameString = new File(fileName).getName();
//                response.setHeader("Content-Disposition", "attachment; filename=" + fileNameString);
//                response.setHeader("Content-Transfer-Encoding", "binary");
//                response.setHeader("Cache-Control", "must-revalidate");
//                response.setHeader("Pragma", "public");
//                IOUtils.copy(inputStream, response.getOutputStream());
//                response.flushBuffer();
//                logger.log(Level.INFO, "File downloaded successfully.");
//            } catch (Exception e) {
//                logger.log(Level.SEVERE, "Request could not be completed at this moment. Please try again.", e);
//            }

            return fileName;

        } catch (Exception e) {
            //logger.debug("Request could not be completed at this moment. Please try again.");
            e.printStackTrace();
            throw e;
        }
    }

    
    
    @RequestMapping(value = "/downloadPurchaseSheet")
    @ResponseBody
    public String downloadPurchaseSheet(@RequestParam(name = "exportDir", required = false) String exportDir, HttpServletRequest request,
            HttpSession session, HttpServletResponse response)
            throws Exception {

        try {
            String fileName = null;
            try {
                fileName = FILE_PATH;
                if (exportDir != null && exportDir.length() > 0) {
                    try {
                        File f = new File(exportDir);
                        if (f.exists() && f.isDirectory()) {
                            fileName = exportDir;
                        }
                    } catch (Exception e) {

                    }
                }

                if (!fileName.endsWith(File.separator)) {
                    fileName = fileName + File.separator;
                }

                fileName = fileName + FILE_NAME;
                SimpleDateFormat format = new SimpleDateFormat("yyyyMMDDHHmmssS");
                fileName = fileName.replace("@TIME", format.format(new Date()));
                fileName = fileName.replace("@TYPE", "PRODUCT-PURCHASE-SHEET");

                ExcelWriter excelWriter = new ExcelWriter();

                excelWriter.downloadPurchaseSheet(fileName, "PRODUCT-PURCHASE-SHEET", monitordao);
            } catch (Exception ex) {
                LOGGER.log(Level.SEVERE, ex.getMessage(), ex);
                throw ex;
            }

            LOGGER.log(Level.INFO, "Report File path : {0}", fileName);

            return fileName;

        } catch (Exception e) {
            //logger.debug("Request could not be completed at this moment. Please try again.");
            e.printStackTrace();
            throw e;
        }
    }

    @RequestMapping(value = "/backupDatabaseComplete")
    @ResponseBody
    public String backupDatabaseComplete(@RequestParam(name = "backupDir", required = false) String backupDir) {

        try {
            String fileName = null;
            try {
                fileName = FILE_PATH;
                boolean overRiddenPath = false;
                if (backupDir != null && backupDir.length() > 0) {
                    try {
                        File f = new File(backupDir);
                        if (f.exists() && f.isDirectory()) {
                            fileName = backupDir;
                            overRiddenPath = true;
                        }
                    } catch (Exception e) {

                    }
                }

                if (!overRiddenPath) {
                    File f = new File(fileName);
                    if (f.exists() && f.isDirectory()) {
                        overRiddenPath = true;
                    }
                }

                if (!overRiddenPath) {
                    fileName = System.getProperty("user.home");
                    File f = new File(fileName);
                    if (f.exists() && f.isDirectory()) {
                        overRiddenPath = true;
                    }
                }

                if (!fileName.endsWith(File.separator)) {
                    fileName = fileName + File.separator;
                }

                String fileNameGen = backUpDatabase(monitordao.getDBConnection(), fileName);
                return fileName + fileNameGen;
            } catch (Exception e) {

            }

        } catch (Exception ex) {
            Logger.getLogger(ExcelDataExportControllerEhr.class.getName()).log(Level.SEVERE, null, ex);
            return "Error : " + ex.getMessage();
        }
        return "Error";
    }

    public String backUpDatabase(Connection conn, String backupDir) throws SQLException {

        String fileName = "@TYPE-@TIME";
        try {
            SimpleDateFormat format = new SimpleDateFormat("dd-MM-yyyy-HH-mm-ss");
            fileName = fileName.replace("@TYPE", "DATABASE-BACKUP");
            fileName = fileName.replace("@TIME", format.format(new Date()));

            String backupdirectory = fileName;
            CallableStatement cs = conn.prepareCall("CALL SYSCS_UTIL.SYSCS_BACKUP_DATABASE(?)");
            cs.setString(1, backupdirectory);
            cs.execute();
            cs.close();

            if (backupdirectory != null) {

                //Get the Backup src dir
                List<ApplicationConfiguration> appConfig = monitordao.getBackupConfigurations();
                ApplicationConfiguration config = null;
                if (!appConfig.isEmpty()) {
                    config = appConfig.get(0);
                }

                String srcLocation = config.getBackupDbSrcLibLocation();
                if (!srcLocation.endsWith(File.separator)) {
                    srcLocation = srcLocation + File.separator;
                }
                String zipLocation = config.getBackupZipLocation();
                if (backupDir != null && backupDir.length() > 0) {
                    try {
                        File f1 = new File(backupDir);
                        if (f1.exists() && f1.isDirectory()) {
                            zipLocation = backupDir;
                        }
                    } catch (Exception e) {

                    }
                }

                if (!zipLocation.endsWith(File.separator)) {
                    zipLocation = zipLocation + File.separator;
                }
                zipLocation = zipLocation + backupdirectory + ".zip";
                LOGGER.info("Source : " + srcLocation);
                LOGGER.info("zipLocation : " + zipLocation);
                //Util.pack(srcLocation, zipLocation);
                LOGGER.info("Backup zip is created on : " + zipLocation);
                return zipLocation;
            }
            System.out.println("backed up database to " + backupdirectory);
        } catch (Exception ex) {
            Logger.getLogger(ExcelDataExportControllerEhr.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (conn != null) {
                conn.close();
            }
        }

        return fileName;
    }

    @RequestMapping(value = "/downloadSalesSheet")
    @ResponseBody
    public String downloadSalesSheet(HttpServletRequest request,
            HttpSession session, HttpServletResponse response)
            throws Exception {

        try {
            String fileName = null;
            try {
                fileName = FILE_PATH;
                SimpleDateFormat format = new SimpleDateFormat("yyyyMMDDHHmmssS");
                fileName = fileName.replace("@TIME", format.format(new Date()));
                fileName = fileName.replace("@TYPE", "PRODUCT-SALES-SHEET");

                ExcelWriter excelWriter = new ExcelWriter();

                excelWriter.downloadSalesSheet(fileName, "PRODUCT-SALES-SHEET", monitordao);
            } catch (Exception ex) {
                LOGGER.log(Level.SEVERE, ex.getMessage(), ex);
                throw ex;
            }

            LOGGER.log(Level.INFO, "Report File path : {0}", fileName);
//            EmailQueueDataInserter ins = new EmailQueueDataInserter();
//            ins.sendMail("paramjeetsinghbawa@gmail.com", "PRODUCT-SHEET-EXPORT-FILE", "Hi, <br />Please find the attached report <br /><br />Thanks,<br />Param", fileName, null);
//            
//            FileInputStream inputStream = new FileInputStream(fileName);
//
//            //response.setContentType("application/force-download");
//            response.setHeader("Content-Disposition", "attachment; filename="
//                    + new File(fileName).getName());
//            response.setHeader("Content-Transfer-Encoding", "binary");
//            response.setHeader("Cache-Control", "must-revalidate");
//            response.setHeader("Pragma", "public");
//            IOUtils.copy(inputStream, response.getOutputStream());
//            response.flushBuffer();
//
//            inputStream.close();
            //inputStream.close();

            return fileName;

        } catch (Exception e) {
            //logger.debug("Request could not be completed at this moment. Please try again.");
            e.printStackTrace();
            throw e;
        }
    }

}
