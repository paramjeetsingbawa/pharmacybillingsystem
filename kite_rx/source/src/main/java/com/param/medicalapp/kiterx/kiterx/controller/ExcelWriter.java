/**
 * *****************************************************************************
 * Copyright (c) 2008-2015 LogiCoy, Inc. All rights reserved. This program and
 * the accompanying materials are made available under the terms of LogiCoy
 * License v1.0 which accompanies this distribution, and is available at
 * http://www.logicoy.com
 *
 * Contributors: LogiCoy, Inc. - initial API and implementation
 * ****************************************************************************
 */
/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend:src/main/java/project/security/AccountDetailsServiceImpl-spring3.p.vm.java
 */
package com.param.medicalapp.kiterx.kiterx.controller;


import com.param.medicalapp.kiterx.kiterx.dao.MonitoringDao;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.springframework.stereotype.Repository;

/**
 *
 * @author Punyashree
 */
@Repository
public class ExcelWriter {

    private static final Logger LOGGER = Logger.getLogger(ExcelWriter.class.getName());

    public void downloadProductSheet(String fileName, String fileType, MonitoringDao monitordao) throws Exception {
        int rowCount = 0;

        Workbook workbook = null;

        if (fileName.endsWith("xlsx")) {
            workbook = new XSSFWorkbook();
        } else if (fileName.endsWith("xls")) {
            workbook = new HSSFWorkbook();
        }
        Sheet sheet = workbook.createSheet("exported data");
        Row row = sheet.createRow(rowCount);
        Cell cell;

        cell = row.createCell(0);
        cell.setCellValue("ENTRY-DATE");
        cell = row.createCell(1);
        cell.setCellValue("PRODUCT-NAME");
        cell = row.createCell(2);
        cell.setCellValue("PACKING");
        cell = row.createCell(3);
        cell.setCellValue("QUANTITY IN SHOP");
        cell = row.createCell(4);
        cell.setCellValue("FREE");
        cell = row.createCell(5);
        cell.setCellValue("BATCH NO");
        cell = row.createCell(6);
        cell.setCellValue("EXPIRY DATE");
        cell = row.createCell(7);
        cell.setCellValue("MRP");
        cell = row.createCell(8);
        cell.setCellValue("PURCHASE RATE");
        cell = row.createCell(9);
        cell.setCellValue("TAXES");
        cell = row.createCell(10);
        cell.setCellValue("PRODUCT-DISCOUNT");
        cell = row.createCell(11);
        cell.setCellValue("TOTAL");
        cell = row.createCell(12);
        cell.setCellValue("COMPANY");
        cell = row.createCell(13);
        cell.setCellValue("DISTUBUTER NAME");
        cell = row.createCell(14);
        cell.setCellValue("DRUG SCHEDULE");
        cell = row.createCell(15);
        cell.setCellValue("CGST");
        cell = row.createCell(16);
        cell.setCellValue("SGST");
        cell = row.createCell(17);
        cell.setCellValue("MARGIN");
        cell = row.createCell(18);
        cell.setCellValue("IS_DELETED");
        try {
            String sql = "SELECT DATE,PRODUCT_NAME,PACKING,QUANTITY_IN_SHOP,FREE,"
                    + "BATCH_NO,EXPIRE_DATE,MRP,PURCHASE_RATE,VAT,DISCOUNT,COMPANY,DISTUBUTER_NAME,DRUG_SCHEDULE, CGST,SGST, MARGIN,IS_DELETED "
                    + " from PRODUCT_MASTER";

            LOGGER.log(Level.INFO, "Executing Query: {0}", sql);

            List<Map<String, Object>> list = monitordao.queryForList(sql);

            //LOGGER.info("Return : " + list);
            for (int i = 0; i < list.size(); i++) {
                row = sheet.createRow(++rowCount);
                // row = spreadsheet.createRow(++rowCount);
                cell = row.createCell(0);
                cell.setCellValue((String) list.get(i).get("DATE"));
                cell = row.createCell(1);
                cell.setCellValue((String) list.get(i).get("PRODUCT_NAME"));
                cell = row.createCell(2);
                cell.setCellValue((String) list.get(i).get("PACKING"));
                cell = row.createCell(3);
                cell.setCellValue((String) list.get(i).get("QUANTITY_IN_SHOP"));
                cell = row.createCell(4);
                cell.setCellValue((String) list.get(i).get("FREE"));
                cell = row.createCell(5);
                cell.setCellValue((String) list.get(i).get("BATCH_NO"));
                cell = row.createCell(6);
                cell.setCellValue((String) list.get(i).get("EXPIRE_DATE"));
                cell = row.createCell(7);
                cell.setCellValue((String) list.get(i).get("MRP"));
                cell = row.createCell(8);
                cell.setCellValue((String) list.get(i).get("PURCHASE_RATE"));
                cell = row.createCell(9);
                cell.setCellValue((String) list.get(i).get("VAT"));
                cell = row.createCell(10);
                cell.setCellValue((String) list.get(i).get("DISCOUNT"));
                cell = row.createCell(11);
                cell.setCellValue("");
                cell = row.createCell(12);
                cell.setCellValue((String) list.get(i).get("COMPANY"));
                cell = row.createCell(13);
                cell.setCellValue((String) list.get(i).get("DISTUBUTER_NAME"));
                cell = row.createCell(14);
                cell.setCellValue((String) list.get(i).get("DRUG_SCHEDULE"));
                cell = row.createCell(15);
                cell.setCellValue((String) list.get(i).get("CGST"));
                cell = row.createCell(16);
                cell.setCellValue((String) list.get(i).get("SGST"));
                cell = row.createCell(17);
                cell.setCellValue((String) list.get(i).get("MARGIN"));
                cell = row.createCell(18);
                cell.setCellValue((Integer) list.get(i).get("IS_DELETED"));
            }

            FileOutputStream out = new FileOutputStream(new File(fileName));
            workbook.write(out);
            out.close();

        } catch (Exception e) {
            e.printStackTrace();
            throw e;
        }
    }

    public void downloadProductSheetCurrentStock(String fileName, String fileType, MonitoringDao monitordao) throws Exception {
        int rowCount = 0;

        Workbook workbook = null;

        if (fileName.endsWith("xlsx")) {
            workbook = new XSSFWorkbook();
        } else if (fileName.endsWith("xls")) {
            workbook = new HSSFWorkbook();
        }
        Sheet sheet = workbook.createSheet("exported data");
        Row row = sheet.createRow(rowCount);
        Cell cell;

        cell = row.createCell(0);
        cell.setCellValue("ENTRY-DATE");
        cell = row.createCell(1);
        cell.setCellValue("PRODUCT-NAME");
        cell = row.createCell(2);
        cell.setCellValue("PACKING");
        cell = row.createCell(3);
        cell.setCellValue("QUANTITY IN SHOP");
        cell = row.createCell(4);
        cell.setCellValue("FREE");
        cell = row.createCell(5);
        cell.setCellValue("BATCH NO");
        cell = row.createCell(6);
        cell.setCellValue("EXPIRY DATE");
        cell = row.createCell(7);
        cell.setCellValue("MRP");
        cell = row.createCell(8);
        cell.setCellValue("PURCHASE RATE");
        cell = row.createCell(9);
        cell.setCellValue("TAXES");
        cell = row.createCell(10);
        cell.setCellValue("PRODUCT-DISCOUNT");
        cell = row.createCell(11);
        cell.setCellValue("TOTAL");
        cell = row.createCell(12);
        cell.setCellValue("COMPANY");
        cell = row.createCell(13);
        cell.setCellValue("DISTUBUTER NAME");
        cell = row.createCell(14);
        cell.setCellValue("DRUG SCHEDULE");
        cell = row.createCell(15);
        cell.setCellValue("CGST");
        cell = row.createCell(16);
        cell.setCellValue("SGST");
        cell = row.createCell(17);
        cell.setCellValue("MARGIN");
        cell = row.createCell(18);
        cell.setCellValue("IS_DELETED");
        cell = row.createCell(19);
        cell.setCellValue("PRODUCT_ID");
        try {
            String sql = "SELECT DATE,PRODUCT_NAME,PACKING,QUANTITY_IN_SHOP,FREE,"
                    + "BATCH_NO,EXPIRE_DATE,MRP,PURCHASE_RATE,VAT,DISCOUNT,COMPANY,DISTUBUTER_NAME,DRUG_SCHEDULE, CGST,SGST, MARGIN,IS_DELETED, PRODUCT_ID "
                    + " from PRODUCT_MASTER where IS_DELETED = 0";

            LOGGER.log(Level.INFO, "Executing Query: {0}", sql);

            List<Map<String, Object>> list = monitordao.queryForList(sql);

            //LOGGER.info("Return : " + list);
            for (int i = 0; i < list.size(); i++) {

                try {
                    String qty = (String) list.get(i).get("QUANTITY_IN_SHOP");
                    if (qty == null) {
                        continue;
                    }
                    Double qtrD = Double.parseDouble(qty);
                    if (qtrD <= 0) {
                        continue;
                    }
                } catch (Exception e) {

                }

                row = sheet.createRow(++rowCount);
                // row = spreadsheet.createRow(++rowCount);
                cell = row.createCell(0);
                cell.setCellValue((String) list.get(i).get("DATE"));
                cell = row.createCell(1);
                cell.setCellValue((String) list.get(i).get("PRODUCT_NAME"));
                cell = row.createCell(2);
                cell.setCellValue((String) list.get(i).get("PACKING"));
                cell = row.createCell(3);

                cell.setCellValue((String) list.get(i).get("QUANTITY_IN_SHOP"));
                cell = row.createCell(4);
                cell.setCellValue((String) list.get(i).get("FREE"));
                cell = row.createCell(5);
                cell.setCellValue((String) list.get(i).get("BATCH_NO"));
                cell = row.createCell(6);
                cell.setCellValue((String) list.get(i).get("EXPIRE_DATE"));
                cell = row.createCell(7);
                cell.setCellValue((String) list.get(i).get("MRP"));
                cell = row.createCell(8);
                cell.setCellValue((String) list.get(i).get("PURCHASE_RATE"));
                cell = row.createCell(9);
                cell.setCellValue((String) list.get(i).get("VAT"));
                cell = row.createCell(10);
                cell.setCellValue((String) list.get(i).get("DISCOUNT"));
                cell = row.createCell(11);
                cell.setCellValue("");
                cell = row.createCell(12);
                cell.setCellValue((String) list.get(i).get("COMPANY"));
                cell = row.createCell(13);
                cell.setCellValue((String) list.get(i).get("DISTUBUTER_NAME"));
                cell = row.createCell(14);
                cell.setCellValue((String) list.get(i).get("DRUG_SCHEDULE"));
                cell = row.createCell(15);
                cell.setCellValue((String) list.get(i).get("CGST"));
                cell = row.createCell(16);
                cell.setCellValue((String) list.get(i).get("SGST"));
                cell = row.createCell(17);
                cell.setCellValue((String) list.get(i).get("MARGIN"));
                cell = row.createCell(18);
                cell.setCellValue((Integer) list.get(i).get("IS_DELETED"));
                cell = row.createCell(19);
                cell.setCellValue((Integer) list.get(i).get("PRODUCT_ID"));
            }

            FileOutputStream out = new FileOutputStream(new File(fileName));
            workbook.write(out);
            out.close();

        } catch (Exception e) {
            e.printStackTrace();
            throw e;
        }
    }

    public void downloadProductSheetCurrentStockCSV(String fileName, String fileType, MonitoringDao monitordao) throws Exception {
        int rowCount = 0;

        StringBuilder builder = new StringBuilder();
        builder.append("ENTRY-DATE,");
        builder.append("PRODUCT-NAME,");
        builder.append("PACKING,");
        builder.append("QUANTITY IN SHOP,");
        builder.append("FREE,");
        builder.append("BATCH NO,");
        builder.append("EXPIRY DATE,");
        builder.append("MRP,");
        builder.append("PURCHASE RATE,");
        builder.append("TAXES,");
        builder.append("PRODUCT-DISCOUNT,");
        builder.append("TOTAL,");
        builder.append("COMPANY,");
        builder.append("DISTUBUTER NAME,");
        builder.append("DRUG SCHEDULE,");
        builder.append("CGST,");
        builder.append("SGST,");
        builder.append("MARGIN,");
        builder.append("IS_DELETED,");
        builder.append("PRODUCT_ID");
        builder.append("\n");

        FileOutputStream os = new FileOutputStream(fileName);

        os.write(builder.toString().getBytes());
        os.flush();

        try {
            int pageNp = 0;
            int pageSize = 1000;
            List<Map<String, Object>> list = null;
            StringBuilder builder2 = null;
            do {
                String sql = "SELECT DATE,PRODUCT_NAME,PACKING,QUANTITY_IN_SHOP,FREE,"
                        + "BATCH_NO,EXPIRE_DATE,MRP,PURCHASE_RATE,VAT,DISCOUNT,COMPANY,DISTUBUTER_NAME,DRUG_SCHEDULE, CGST,SGST, "
                        + "MARGIN,IS_DELETED, PRODUCT_ID "
                        + " from PRODUCT_MASTER where IS_DELETED = 0 ORDER BY PRODUCT_ID OFFSET " + (pageNp * pageSize) + " ROWS FETCH NEXT " + pageSize + " ROWS ONLY";

                LOGGER.log(Level.INFO, "Executing Query: {0}", sql);

                list = null;
                list = monitordao.queryForList(sql);

                //LOGGER.info("Return : " + list);
                builder2 = new StringBuilder();
                for (int i = 0; i < list.size(); i++) {

                    try {
                        String qty = (String) list.get(i).get("QUANTITY_IN_SHOP");
                        if (qty == null) {
                            continue;
                        }
                        Double qtrD = Double.parseDouble(qty);
                        if (qtrD <= 0) {
                            continue;
                        }
                    } catch (Exception e) {

                    }
                    // row = spreadsheet.createRow(++rowCount);
                    builder2.append((String) list.get(i).get("DATE"));
                    builder2.append(",");
                    builder2.append((String) list.get(i).get("PRODUCT_NAME"));
                    builder2.append(",");
                    builder2.append((String) list.get(i).get("PACKING"));
                    builder2.append(",");
                    builder2.append((String) list.get(i).get("QUANTITY_IN_SHOP"));
                    builder2.append(",");
                    builder2.append((String) list.get(i).get("FREE"));
                    builder2.append(",");
                    builder2.append((String) list.get(i).get("BATCH_NO"));
                    builder2.append(",");
                    builder2.append((String) list.get(i).get("EXPIRE_DATE"));
                    builder2.append(",");
                    builder2.append((String) list.get(i).get("MRP"));
                    builder2.append(",");
                    builder2.append((String) list.get(i).get("PURCHASE_RATE"));
                    builder2.append(",");
                    builder2.append((String) list.get(i).get("VAT"));
                    builder2.append(",");
                    builder2.append((String) list.get(i).get("DISCOUNT"));
                    builder2.append(",");
                    builder2.append("");
                    builder2.append(",");
                    builder2.append((String) list.get(i).get("COMPANY"));
                    builder2.append(",");
                    builder2.append((String) list.get(i).get("DISTUBUTER_NAME"));
                    builder2.append(",");
                    builder2.append((String) list.get(i).get("DRUG_SCHEDULE"));
                    builder2.append(",");
                    builder2.append((String) list.get(i).get("CGST"));
                    builder2.append(",");
                    builder2.append((String) list.get(i).get("SGST"));
                    builder2.append(",");
                    builder2.append((String) list.get(i).get("MARGIN"));
                    builder2.append(",");
                    builder2.append((Integer) list.get(i).get("IS_DELETED"));
                    builder2.append(",");
                    builder2.append((Integer) list.get(i).get("PRODUCT_ID"));
                    builder2.append("\n");
                }

                os.write(builder2.toString().getBytes());
                os.flush();
                pageNp++;

            } while (list != null && list.size() > 0);

        } catch (Exception e) {
            e.printStackTrace();
            throw e;
        }
    }

    public void downloadProductSheetCurrentStockZero(String fileName, String fileType, MonitoringDao monitordao) throws Exception {
        int rowCount = 0;

        Workbook workbook = null;

        if (fileName.endsWith("xlsx")) {
            workbook = new XSSFWorkbook();
        } else if (fileName.endsWith("xls")) {
            workbook = new HSSFWorkbook();
        }
        Sheet sheet = workbook.createSheet("exported data");
        Row row = sheet.createRow(rowCount);
        Cell cell;

        cell = row.createCell(0);
        cell.setCellValue("ENTRY-DATE");
        cell = row.createCell(1);
        cell.setCellValue("PRODUCT-NAME");
        cell = row.createCell(2);
        cell.setCellValue("PACKING");
        cell = row.createCell(3);
        cell.setCellValue("QUANTITY IN SHOP");
        cell = row.createCell(4);
        cell.setCellValue("FREE");
        cell = row.createCell(5);
        cell.setCellValue("BATCH NO");
        cell = row.createCell(6);
        cell.setCellValue("EXPIRY DATE");
        cell = row.createCell(7);
        cell.setCellValue("MRP");
        cell = row.createCell(8);
        cell.setCellValue("PURCHASE RATE");
        cell = row.createCell(9);
        cell.setCellValue("TAXES");
        cell = row.createCell(10);
        cell.setCellValue("PRODUCT-DISCOUNT");
        cell = row.createCell(11);
        cell.setCellValue("TOTAL");
        cell = row.createCell(12);
        cell.setCellValue("COMPANY");
        cell = row.createCell(13);
        cell.setCellValue("DISTUBUTER NAME");
        cell = row.createCell(14);
        cell.setCellValue("DRUG SCHEDULE");
        cell = row.createCell(15);
        cell.setCellValue("CGST");
        cell = row.createCell(16);
        cell.setCellValue("SGST");
        cell = row.createCell(17);
        cell.setCellValue("MARGIN");
        cell = row.createCell(18);
        cell.setCellValue("IS_DELETED");
        cell = row.createCell(19);
        cell.setCellValue("PRODUCT-ID");
        try {
            String sql = "SELECT DATE,PRODUCT_NAME,PACKING,QUANTITY_IN_SHOP,FREE,"
                    + "BATCH_NO,EXPIRE_DATE,MRP,PURCHASE_RATE,VAT,DISCOUNT,COMPANY,DISTUBUTER_NAME,DRUG_SCHEDULE, CGST,SGST, MARGIN,IS_DELETED,PRODUCT_ID "
                    + " from PRODUCT_MASTER ";

            LOGGER.log(Level.INFO, "Executing Query: {0}", sql);

            List<Map<String, Object>> list = monitordao.queryForList(sql);

            //LOGGER.info("Return : " + list);
            for (int i = 0; i < list.size(); i++) {

//                try {
//                    String qty = (String) list.get(i).get("QUANTITY_IN_SHOP");
//                    if (qty == null) {
//                        continue;
//                    }
//                    Double qtrD = Double.parseDouble(qty);
//                    if (qtrD <= 0) {
//                        continue;
//                    }
//                } catch (Exception e) {
//
//                }
                row = sheet.createRow(++rowCount);
                // row = spreadsheet.createRow(++rowCount);
                cell = row.createCell(0);
                cell.setCellValue((String) list.get(i).get("DATE"));
                cell = row.createCell(1);
                cell.setCellValue((String) list.get(i).get("PRODUCT_NAME"));
                cell = row.createCell(2);
                cell.setCellValue((String) list.get(i).get("PACKING"));
                cell = row.createCell(3);

                cell.setCellValue((String) list.get(i).get("QUANTITY_IN_SHOP"));
                cell = row.createCell(4);
                cell.setCellValue((String) list.get(i).get("FREE"));
                cell = row.createCell(5);
                cell.setCellValue((String) list.get(i).get("BATCH_NO"));
                cell = row.createCell(6);
                cell.setCellValue((String) list.get(i).get("EXPIRE_DATE"));
                cell = row.createCell(7);
                cell.setCellValue((String) list.get(i).get("MRP"));
                cell = row.createCell(8);
                cell.setCellValue((String) list.get(i).get("PURCHASE_RATE"));
                cell = row.createCell(9);
                cell.setCellValue((String) list.get(i).get("VAT"));
                cell = row.createCell(10);
                cell.setCellValue((String) list.get(i).get("DISCOUNT"));
                cell = row.createCell(11);
                cell.setCellValue("");
                cell = row.createCell(12);
                cell.setCellValue((String) list.get(i).get("COMPANY"));
                cell = row.createCell(13);
                cell.setCellValue((String) list.get(i).get("DISTUBUTER_NAME"));
                cell = row.createCell(14);
                cell.setCellValue((String) list.get(i).get("DRUG_SCHEDULE"));
                cell = row.createCell(15);
                cell.setCellValue((String) list.get(i).get("CGST"));
                cell = row.createCell(16);
                cell.setCellValue((String) list.get(i).get("SGST"));
                cell = row.createCell(17);
                cell.setCellValue((String) list.get(i).get("MARGIN"));
                cell = row.createCell(18);
                cell.setCellValue((Integer) list.get(i).get("IS_DELETED"));
                cell = row.createCell(19);
                cell.setCellValue((Integer) list.get(i).get("PRODUCT_ID"));
            }

            FileOutputStream out = new FileOutputStream(new File(fileName));
            workbook.write(out);
            out.close();

        } catch (Exception e) {
            e.printStackTrace();
            throw e;
        }
    }

    public void downloadProductSheetCurrentStockZeroCSV(String fileName, String fileType, MonitoringDao monitordao) throws Exception {
        int rowCount = 0;

        StringBuilder builder = new StringBuilder();
        builder.append("ENTRY-DATE,");
        builder.append("PRODUCT-NAME,");
        builder.append("PACKING,");
        builder.append("QUANTITY IN SHOP,");
        builder.append("FREE,");
        builder.append("BATCH NO,");
        builder.append("EXPIRY DATE,");
        builder.append("MRP,");
        builder.append("PURCHASE RATE,");
        builder.append("TAXES,");
        builder.append("PRODUCT-DISCOUNT,");
        builder.append("TOTAL,");
        builder.append("COMPANY,");
        builder.append("DISTUBUTER NAME,");
        builder.append("DRUG SCHEDULE,");
        builder.append("CGST,");
        builder.append("SGST,");
        builder.append("MARGIN,");
        builder.append("IS_DELETED,");
        builder.append("PRODUCT_ID");
        builder.append("\n");

        FileOutputStream os = new FileOutputStream(fileName);

        os.write(builder.toString().getBytes());
        os.flush();

        try {

            int pageNp = 0;
            int pageSize = 1000;
            List<Map<String, Object>> list = null;
            StringBuilder builder2 = null;
            do {

                String sql = "SELECT DATE,PRODUCT_NAME,PACKING,QUANTITY_IN_SHOP,FREE,"
                        + "BATCH_NO,EXPIRE_DATE,MRP,PURCHASE_RATE,VAT,DISCOUNT,COMPANY,DISTUBUTER_NAME,DRUG_SCHEDULE, CGST,SGST, MARGIN,IS_DELETED,PRODUCT_ID "
                        + " from PRODUCT_MASTER ORDER BY PRODUCT_ID OFFSET " + (pageNp * pageSize) + " ROWS FETCH NEXT " + pageSize + " ROWS ONLY";

                LOGGER.log(Level.INFO, "Executing Query: {0}", sql);

                list = monitordao.queryForList(sql);
                builder2 = new StringBuilder();

                for (int i = 0; i < list.size(); i++) {
                    builder2.append((String) list.get(i).get("DATE"));
                    builder2.append(",");
                    builder2.append((String) list.get(i).get("PRODUCT_NAME"));
                    builder2.append(",");
                    builder2.append((String) list.get(i).get("PACKING"));
                    builder2.append(",");
                    builder2.append((String) list.get(i).get("QUANTITY_IN_SHOP"));
                    builder2.append(",");
                    builder2.append((String) list.get(i).get("FREE"));
                    builder2.append(",");
                    builder2.append((String) list.get(i).get("BATCH_NO"));
                    builder2.append(",");
                    builder2.append((String) list.get(i).get("EXPIRE_DATE"));
                    builder2.append(",");
                    builder2.append((String) list.get(i).get("MRP"));
                    builder2.append(",");
                    builder2.append((String) list.get(i).get("PURCHASE_RATE"));
                    builder2.append(",");
                    builder2.append((String) list.get(i).get("VAT"));
                    builder2.append(",");
                    builder2.append((String) list.get(i).get("DISCOUNT"));
                    builder2.append(",");
                    builder2.append("");
                    builder2.append(",");
                    builder2.append((String) list.get(i).get("COMPANY"));
                    builder2.append(",");
                    builder2.append((String) list.get(i).get("DISTUBUTER_NAME"));
                    builder2.append(",");
                    builder2.append((String) list.get(i).get("DRUG_SCHEDULE"));
                    builder2.append(",");
                    builder2.append((String) list.get(i).get("CGST"));
                    builder2.append(",");
                    builder2.append((String) list.get(i).get("SGST"));
                    builder2.append(",");
                    builder2.append((String) list.get(i).get("MARGIN"));
                    builder2.append(",");
                    builder2.append((Integer) list.get(i).get("IS_DELETED"));
                    builder2.append(",");
                    builder2.append((Integer) list.get(i).get("PRODUCT_ID"));
                    builder2.append("\n");
                }

                os.write(builder2.toString().getBytes());
                os.flush();
                pageNp++;

            } while (list != null && list.size() > 0);

        } catch (Exception e) {
            e.printStackTrace();
            throw e;
        }
    }

    public void downloadSalesSheet(String fileName, String fileType, MonitoringDao monitordao) throws Exception {
        int rowCount = 0;

        Workbook workbook = null;

        if (fileName.endsWith("xlsx")) {
            workbook = new XSSFWorkbook();
        } else if (fileName.endsWith("xls")) {
            workbook = new HSSFWorkbook();
        }

        Sheet sheet = workbook.createSheet("exported data");
        Row row = sheet.createRow(rowCount);
        Cell cell;

        cell = row.createCell(0);
        cell.setCellValue("DATE");
        cell = row.createCell(1);
        cell.setCellValue("PRODUCT-NAME");
        cell = row.createCell(2);
        cell.setCellValue("PACKING");
        cell = row.createCell(3);
        cell.setCellValue("QUANTITY");
        cell = row.createCell(4);
        cell.setCellValue("FREE");
        cell = row.createCell(5);
        cell.setCellValue("BATCH");
        cell = row.createCell(6);
        cell.setCellValue("EXP");
        cell = row.createCell(7);
        cell.setCellValue("MRP");
        cell = row.createCell(8);
        cell.setCellValue("RATE");
        cell = row.createCell(9);
        cell.setCellValue("TAXES");
        cell = row.createCell(10);
        cell.setCellValue("DIS");
        cell = row.createCell(11);
        cell.setCellValue("TOTAL");
        cell = row.createCell(12);
        cell.setCellValue("COMPANY");
        cell = row.createCell(13);
        cell.setCellValue("DISTUBUTER NAME");
        cell = row.createCell(14);
        cell.setCellValue("SHELDUE");
        try {
            String sql = "SELECT DATE,PRODUCT_NAME,PACKING,QUANTITY_IN_SHOP,FREE,"
                    + "BATCH_NO,EXPIRE_DATE,MRP,PURCHASE_RATE,VAT,DISCOUNT,COMPANY,DISTUBUTER_NAME,DRUG_SCHEDULE"
                    + " from PRODUCT_MASTER";

            LOGGER.log(Level.INFO, "Executing Query: {0}", sql);

            List<Map<String, Object>> list = monitordao.queryForList(sql);

            LOGGER.info("Return : " + list);

            for (int i = 0; i < list.size(); i++) {
                row = sheet.createRow(++rowCount);
                // row = spreadsheet.createRow(++rowCount);
                cell = row.createCell(0);
                cell.setCellValue((String) list.get(i).get("DATE"));
                cell = row.createCell(1);
                cell.setCellValue((String) list.get(i).get("PRODUCT_NAME"));
                cell = row.createCell(2);
                cell.setCellValue((String) list.get(i).get("PACKING"));
                cell = row.createCell(3);
                cell.setCellValue((String) list.get(i).get("QUANTITY_IN_SHOP"));
                cell = row.createCell(4);
                cell.setCellValue((String) list.get(i).get("FREE"));
                cell = row.createCell(5);
                cell.setCellValue((String) list.get(i).get("BATCH_NO"));
                cell = row.createCell(6);
                cell.setCellValue((String) list.get(i).get("EXPIRE_DATE"));
                cell = row.createCell(7);
                cell.setCellValue((String) list.get(i).get("MRP"));
                cell = row.createCell(8);
                cell.setCellValue((String) list.get(i).get("PURCHASE_RATE"));
                cell = row.createCell(9);
                cell.setCellValue((String) list.get(i).get("VAT"));
                cell = row.createCell(10);
                cell.setCellValue((String) list.get(i).get("DISCOUNT"));
                cell = row.createCell(11);
                cell.setCellValue("");
                cell = row.createCell(12);
                cell.setCellValue((String) list.get(i).get("COMPANY"));
                cell = row.createCell(13);
                cell.setCellValue((String) list.get(i).get("DISTUBUTER_NAME"));
                cell = row.createCell(14);
                cell.setCellValue((String) list.get(i).get("DRUG_SCHEDULE"));
            }

            FileOutputStream out = new FileOutputStream(new File(fileName));
            workbook.write(out);
            out.close();

        } catch (Exception e) {
            e.printStackTrace();
            throw e;
        }
    }

    public void downloadPurchaseSheet(String fileName, String fileType, MonitoringDao monitordao) throws Exception {
        int rowCount = 0;

        Workbook workbook = null;

        if (fileName.endsWith("xlsx")) {
            workbook = new XSSFWorkbook();
        } else if (fileName.endsWith("xls")) {
            workbook = new HSSFWorkbook();
        }
        Sheet sheet = workbook.createSheet("exported data");
        Row row = sheet.createRow(rowCount);
        Cell cell;

        cell = row.createCell(0);
        cell.setCellValue("ENTRY-DATE");
        cell = row.createCell(1);
        cell.setCellValue("PRODUCT-NAME");
        cell = row.createCell(2);
        cell.setCellValue("PACKING");
        cell = row.createCell(3);
        cell.setCellValue("QUANTITY PURCHASED");
        cell = row.createCell(4);
        cell.setCellValue("FREE");
        cell = row.createCell(5);
        cell.setCellValue("BATCH");
        cell = row.createCell(6);
        cell.setCellValue("EXPIRY DATE");
        cell = row.createCell(7);
        cell.setCellValue("MRP");
        cell = row.createCell(8);
        cell.setCellValue("PURCHASE RATE");
        cell = row.createCell(9);
        cell.setCellValue("TAXES");
        cell = row.createCell(10);
        cell.setCellValue("PRODUCT-DISCOUNT");
        cell = row.createCell(11);
        cell.setCellValue("TOTAL");
        cell = row.createCell(12);
        cell.setCellValue("COMPANY");
        cell = row.createCell(13);
        cell.setCellValue("DISTUBUTER NAME");
        cell = row.createCell(14);
        cell.setCellValue("DRUG SCHEDULE");
        try {
            String sql = "SELECT ENTRY_DATE as DATE,PRODUCT_NAME,PACKING,QUANTITY_PURCHASED as QUANTITY_IN_SHOP,FREE,"
                    + " BATCH as BATCH_NO,EXPIRY as EXPIRE_DATE,MRP,AMOUNT as PURCHASE_RATE,CGST as VAT,PRODUCT_DISCOUNT as DISCOUNT,COMPANY,"
                    + "DISTRIBUTER_NAME as DISTUBUTER_NAME,DRUG_SCHEDULE"
                    + " from PURCHASE_ORDER_MASTER";

            LOGGER.log(Level.INFO, "Executing PURCHASE_ORDER_MASTER Query: {0}", sql);

            List<Map<String, Object>> list = monitordao.queryForList(sql);

            LOGGER.info("Return : " + list);

            for (int i = 0; i < list.size(); i++) {
                row = sheet.createRow(++rowCount);
                // row = spreadsheet.createRow(++rowCount);
                cell = row.createCell(0);
                cell.setCellValue((String) list.get(i).get("DATE"));
                cell = row.createCell(1);
                cell.setCellValue((String) list.get(i).get("PRODUCT_NAME"));
                cell = row.createCell(2);
                cell.setCellValue((String) list.get(i).get("PACKING"));
                cell = row.createCell(3);
                cell.setCellValue((String) list.get(i).get("QUANTITY_IN_SHOP"));
                cell = row.createCell(4);
                cell.setCellValue((String) list.get(i).get("FREE"));
                cell = row.createCell(5);
                cell.setCellValue((String) list.get(i).get("BATCH_NO"));
                cell = row.createCell(6);
                cell.setCellValue((String) list.get(i).get("EXPIRE_DATE"));
                cell = row.createCell(7);
                cell.setCellValue((String) list.get(i).get("MRP"));
                cell = row.createCell(8);
                cell.setCellValue((String) list.get(i).get("PURCHASE_RATE"));
                cell = row.createCell(9);
                cell.setCellValue((String) list.get(i).get("VAT"));
                cell = row.createCell(10);
                cell.setCellValue((String) list.get(i).get("DISCOUNT"));
                cell = row.createCell(11);
                cell.setCellValue("");
                cell = row.createCell(12);
                cell.setCellValue((String) list.get(i).get("COMPANY"));
                cell = row.createCell(13);
                cell.setCellValue((String) list.get(i).get("DISTUBUTER_NAME"));
                cell = row.createCell(14);
                cell.setCellValue((String) list.get(i).get("DRUG_SCHEDULE"));
            }

            FileOutputStream out = new FileOutputStream(new File(fileName));
            workbook.write(out);
            out.close();

        } catch (Exception e) {
            e.printStackTrace();
            throw e;
        }
    }

}
